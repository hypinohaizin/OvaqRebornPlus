package net.shoreline.client.impl.module.exploit;

import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.init.Managers;
import net.shoreline.client.impl.event.network.PlayerTickEvent;
import net.shoreline.client.api.config.setting.NumberConfig;

public class RegenModule extends ToggleModule {
    private final NumberConfig<Integer> healthConfig = new NumberConfig<>("Health", "Health threshold to start regenerating", 10, 0, 20);
    private final NumberConfig<Integer> packetsPerTickConfig = new NumberConfig<>("Packets/Tick", "Number of packets to send per tick", 20, 2, 120);
    private final NumberConfig<Integer> maxHealthConfig = new NumberConfig<>("MaxHealth", "Maximum health to reach", 20, 0, 20);
    private final NumberConfig<Integer> healthRegenAmount = new NumberConfig<>("RegenAmount", "Amount of health to regenerate per packet", 1, 1, 5);

    public RegenModule() {
        super("Regen", "Regenerates health by sending move packets", ModuleCategory.EXPLOIT);
    }

    @EventListener
    public void onPlayerTick(PlayerTickEvent event) {
        float currentHealth = mc.player.getHealth() + mc.player.getAbsorptionAmount();
        if (currentHealth <= healthConfig.getValue() && currentHealth < maxHealthConfig.getValue()) {
            for (int i = 0; i < packetsPerTickConfig.getValue(); i++) {
                Managers.NETWORK.sendPacket(new PlayerMoveC2SPacket.Full(
                        mc.player.getX(),
                        mc.player.getY(),
                        mc.player.getZ(),
                        mc.player.getYaw(),
                        mc.player.getPitch(),
                        mc.player.isOnGround()
                ));

                if (currentHealth + healthRegenAmount.getValue() <= maxHealthConfig.getValue()) {
                    currentHealth += healthRegenAmount.getValue();
                } else {
                    currentHealth = maxHealthConfig.getValue();
                }
            }
        }
    }
}
