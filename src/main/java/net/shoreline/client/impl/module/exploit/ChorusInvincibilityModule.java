package net.shoreline.client.impl.module.exploit;

import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.BooleanConfig;
import net.shoreline.client.api.config.setting.NumberConfig;
import net.shoreline.client.api.event.EventStage;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.TickEvent;
import net.shoreline.client.impl.event.item.FinishUsingEvent;
import net.shoreline.client.impl.event.network.GameJoinEvent;
import net.shoreline.client.init.Managers;
import net.shoreline.client.init.Modules;
import net.shoreline.client.util.math.timer.CacheTimer;
import net.shoreline.client.util.math.timer.Timer;
import net.shoreline.client.util.player.InventoryUtil;
import net.shoreline.client.util.player.PlayerUtil;

public class ChorusInvincibilityModule extends ToggleModule
{
    private static ChorusInvincibilityModule INSTANCE;

    Config<Boolean> healthCheckConfig = (new BooleanConfig("CheckHealth", "Checks health when joining game", false));
    Config<Float> healthConfig = (new NumberConfig<>("Health", "The health to use chorus", 1.0f, 20.0f, 20.0f, () -> healthCheckConfig.getValue()));
    Config<Boolean> totemsCheckConfig = (new BooleanConfig("CheckTotems", "Checks totems when joining game", false));
    Config<Integer> totemsConfig = (new NumberConfig<>("Totems", "The totems to use chorus", 0, 0, 5, () -> totemsCheckConfig.getValue()));
    private boolean useChorus;
    private final Timer invincibilityTimer = new CacheTimer();

    public ChorusInvincibilityModule()
    {
        super("ChorusInvincibility", "Automatically uses chorus during invincibility frames", ModuleCategory.EXPLOIT);
        INSTANCE = this;
    }

    public static ChorusInvincibilityModule getInstance()
    {
        return INSTANCE;
    }

    @Override
    public void onDisable()
    {
        useChorus = false;
        mc.options.useKey.setPressed(false);
    }

    @EventListener
    public void onGameJoin(GameJoinEvent event)
    {
        if (checkChorus())
        {
            useChorus = true;
            invincibilityTimer.reset();

            // Disable all pvp modules
            Modules.AUTO_ANCHOR.disable();
            Modules.AUTO_CRYSTAL.disable();
            Modules.AUTO_TRAP.disable();
            Modules.AUTO_XP.disable();
            Modules.HOLE_FILL.disable();
            Modules.SELF_TRAP.disable();
            Modules.SURROUND.disable();
            Modules.AUTO_MINE.disable();
        }
    }

    @EventListener
    public void onTick(TickEvent event)
    {
        if (event.getStage() != EventStage.POST || !useChorus || invincibilityTimer.passed(5000))
        {
            return;
        }
        int slot = -1;
        for (int i = 0; i < 9; i++)
        {
            ItemStack stack1 = mc.player.getInventory().getStack(i);
            if (stack1.getItem() == Items.CHORUS_FRUIT)
            {
                slot = i;
            }
        }
        if (slot == -1)
        {
            return;
        }
        Managers.INVENTORY.setClientSlot(slot);
        mc.options.useKey.setPressed(true);
    }

    @EventListener
    public void onFinishUsing(FinishUsingEvent event)
    {
        if (useChorus && event.getStack().getItem() == Items.CHORUS_FRUIT)
        {
            disable();
        }
    }

    private boolean checkChorus()
    {
        if (healthCheckConfig.getValue() && PlayerUtil.getLocalPlayerHealth() > healthConfig.getValue())
        {
            return false;
        }
        return !totemsCheckConfig.getValue() || InventoryUtil.count(Items.TOTEM_OF_UNDYING) <= totemsConfig.getValue();
    }

    public boolean isUsingChorus()
    {
        return useChorus;
    }
}